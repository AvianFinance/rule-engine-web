// SPDX-License-Identifier: MIT
pragma solidity ^0.8.4; 

import @openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol;
import @openzeppelin/contracts/security/ReentrancyGuard.sol;
import @openzeppelin/contracts/utils/structs/EnumerableSet.sol;
import @openzeppelin/contracts/interfaces/IERC721.sol;
import @openzeppelin/contracts/utils/Counters.sol;

error PriceNotMet(address nftAddress, uint256 tokenId, uint256 price);
error ItemNotForSale(address nftAddress, uint256 tokenId);
error NotListed(address nftAddress, uint256 tokenId);
error AlreadyListed(address nftAddress, uint256 tokenId);
error NoProceeds();
error NotOwner();
error NotApprovedForMarketplace();
error PriceMustBeAboveZero();

contract AvianSellExchange is ReentrancyGuard { 

	using Counters for Counters.Counter;
	using EnumerableSet for EnumerableSet.AddressSet;
	using EnumerableSet for EnumerableSet.UintSet;

	struct Listing_sell {address owner;address nftContract;uint256 tokenId;uint256 price;}

	event ItemListed(address indexed seller,address indexed nftAddress,uint256 indexed tokenId,uint256 price);
	event ItemCanceled(address indexed seller,address indexed nftAddress,uint256 indexed tokenId);
	event ItemBought(address indexed buyer,address indexed nftAddress,uint256 indexed tokenId,uint256 price);

	modifier notSListed(address nftAddress, uint256 tokenId) {
		Listing_sell memory listing = s_listings[nftAddress][tokenId];
		if (listing.price > 0) {
		revert AlreadyListed(nftAddress, tokenId);
		}
		_;
	}

	modifier isSListed(address nftAddress, uint256 tokenId) {
		Listing_sell memory listing = s_listings[nftAddress][tokenId];
		if (listing.price <= 0) {
		revert NotListed(nftAddress, tokenId);
		}
		_;
	}

	modifier isOwner(address nftAddress,uint256 tokenId,address spender) {
		IERC721 nft = IERC721(nftAddress);
		address owner = nft.ownerOf(tokenId);
		if (spender != owner) {
		revert NotOwner();
		}
		_;
	}


	// state variables to match as in the proxy context (order should be maintained)

	address private _marketOwner;

	uint256 private _listingFee = .01 ether;

	mapping(address => mapping(uint256 => Listing_sell)) private s_listings;

	mapping(address => uint256) private s_proceeds;

	mapping(address => EnumerableSet.UintSet) private s_address_tokens;

	EnumerableSet.AddressSet private s_address;

	Counters.Counter private s_listed;


	constructor() {
		_marketOwner = msg.sender;
	}


	function listItem(address nftAddress, uint256 tokenID, uint256 price) external
		notSListed(nftAddress, tokenId)
	returns(string memory){
		require(isNFT(nftAddress),'Contract is not an ERC721');
		require(IERC721(nftAddress).ownerOf(tokenId) == msg.sender,'Not owner of nft');
		require(price > 0,'listing price should be greater than 0');
	
		IERC721 nft = IERC721(nftAddress);
		if (nft.getApproved(tokenID) != address(this)) {
		    revert NotApprovedForMarketplace();
		}

		s_listings[nftAddress][tokenID] = Listing_sell(msg.sender,nftAddress,tokenID,price);
		s_listed.increment();
		EnumerableSet.add(s_address_tokens[nftAddress],tokenID);
		EnumerableSet.add(s_address,nftAddress);

		emit ItemListed(msg.sender, nftAddress, tokenId, price);

		returns('NFT Listed successfully for upright selling');
	}

	function updateListing(address nftAddress, uint256 tokenId, uint256 newPrice) external payable
		isSListed(nftAddress, tokenId)
		nonReentrant
		isOwner(nftAddress, tokenId, msg.sender)
	returns(string memory){
		require(newPrice > 0,'listing price should be greater than 0');
	
		s_listings[nftAddress][tokenID].price = price;

		emit ItemListed(msg.sender, nftAddress, tokenId, newPrice);

		returns('Successfully updated the listing');
	}

	function cancelListing(address nftAddress, uint256 tokenID) external
		isOwner(nftAddress, tokenId, msg.sender)
		isSListed(nftAddress, tokenId)
	returns(string memory){
	
		delete s_listings[nftAddress][tokenID];
		EnumerableSet.remove(s_address_tokens[nftAddress],tokenID);
		if (EnumerableSet.length(s_address_tokens[nftAddress]) == 0) {
		    EnumerableSet.remove(s_address,nftAddress);
		}
		s_listed.decrement();

		emit ItemCanceled(msg.sender, nftAddress, tokenId);

		returns('NFT unlisted successfully');
	}

	function buyItem(address nftAddress, uint256 tokenId) external payable
		isSListed(nftAddress, tokenId)
		nonReentrant
	returns(string memory){
	
		emit ItemBought(msg.sender, nftAddress, tokenId, listedItem.price);

		returns('NFT successfully Bought');
	}

	function withdrawProceeds() external payable
	returns(string memory){
	
		returns('Successfully transferred the proceeds');
	}

	function isNFT(address nftContract) public view
	returns(bool){
	
		emit ItemCanceled(msg.sender, nftAddress, tokenId);

		returns(NFT unlisted successfully);
	}


} 

